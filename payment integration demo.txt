const paypal = require('paypal-rest-sdk');
const paymentSchema = require("../models/payment");
const stripe = require('stripe')('sk_test_Czcmd6nNU3pu0sUjKGT3TYAf')
const ApiContracts = require("authorizenet").APIContracts;
const ApiControllers = require("authorizenet").APIControllers;
exports.payForPaypal = async (req, res) => {
    const create_payment_json = {
        "intent": "sale",
        "payer": {
            "payment_method": "paypal"
        },
        "redirect_urls": {
            "return_url": "http://localhost:3001/success",
            "cancel_url": "http://localhost:3001/cancel"
        },
        "transactions": [{
            "item_list": {
                "items": [{
                    "name": req.body.bookname,
                    "price": req.body.price,
                    "currency": "USD",
                    "quantity": 1
                }]
            },
            "amount": {
                "currency": "USD",
                "total": req.body.price
            }
        }]
    }
    paypal.payment.create(create_payment_json, (error, payment) => {
        if (error) {
            throw error;
        } else {
            for (let i = 0; i < payment.links.length; i++) {
                if (payment.links[i].rel === 'approval_url') {
                    res.json({ message: payment.links[i].href });
                }
            }
        }
    });
}
exports.successPaymentPaypal = async (req, res) => {
    const payerId = req.query.PayerID;
    const paymentId = req.query.paymentId;

    const execute_payment_json = {
        "payer_id": payerId,
    };
    paypal.payment.execute(paymentId, execute_payment_json, async (error, payment) => {
        if (error) {
            console.log(error.response);
            throw error;
        } else {
            const newpayment = new paymentSchema({
                paymentId,
                paymentAmount: payment.transactions[0].amount.total,
                paymentMethod: payment.payer.payment_method,
                paymentCurrency: payment.transactions[0].amount.currency
            });
            await newpayment.save();
            res.redirect('/home')
        }
    });
}

exports.paymentStripe = async (req, res) => {
    var exp = req.body.expdate
    var expDate = exp.split('/')
    stripe.customers.create({
        name: req.body.bookname
    })
        .then(async (customer) => {
            const card_token = await stripe.tokens.create({
                card: {
                    number: req.body.cardnumber,
                    exp_month: expDate[0],
                    exp_year: expDate[1],
                    cvc: req.body.cvc
                }
            })
            const card = await stripe.customers.createSource(customer.id, {
                source: card_token.id
            })
            return stripe.charges.create({
                amount: req.body.price * 100,
                description: req.body.bookname,
                currency: 'INR',
                customer: customer.id
            });
        })
        .then(async (charge) => {
            const newpayment = new paymentSchema({
                paymentId: charge.id,
                paymentAmount: charge.amount,
                paymentMethod: "Stripe",
                paymentCurrency: charge.currency
            });
            await newpayment.save();
            res.json({ message: "Success" })
        })
        .catch((err) => {
            console.log(err);
            res.send("Invalid Card number")
        });
}

exports.authorize = async (req, res) => {
    const { cc, cvv, expire, amount } = req.body;
    console.log(req.body);
    const merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
    merchantAuthenticationType.setName("8nL3Rw8ng8");
    merchantAuthenticationType.setTransactionKey("465fpVvJbcn298L5");

    const creditCard = new ApiContracts.CreditCardType();
    // creditCard.setCardNumber(cc);
    // creditCard.setExpirationDate(expire);
    // creditCard.setCardCode(cvv);
    creditCard.setCardNumber('4242424242424242');
	creditCard.setExpirationDate('0825');
	creditCard.setCardCode('999');

    // const paymentType = new ApiContracts.PaymentType();
    // paymentType.setCreditCard(creditCard);

    // const transactionSetting = new ApiContracts.SettingType();
    // transactionSetting.setSettingName('recurringBilling');
    // transactionSetting.setSettingValue('false');

    // const transactionSettingList = [];
    // transactionSettingList.push(transactionSetting);

    // const transactionSettings = new ApiContracts.ArrayOfSetting();
    // transactionSettings.setSetting(transactionSettingList);

    // const transactionRequestType = new ApiContracts.TransactionRequestType();
    // transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
    // transactionRequestType.setPayment(paymentType);
    // transactionRequestType.setAmount(amount);
    // transactionRequestType.setTransactionSettings(transactionSettings);

    // const createRequest = new ApiContracts.CreateTransactionRequest();
    // createRequest.setMerchantAuthentication(merchantAuthenticationType);
    // createRequest.setTransactionRequest(transactionRequestType);

    // console.log(JSON.stringify(createRequest.getJSON(), null, 2));

    // const ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());

    var paymentType = new ApiContracts.PaymentType();
	paymentType.setCreditCard(creditCard);

	var orderDetails = new ApiContracts.OrderType();
	orderDetails.setInvoiceNumber('INV-12345');
	orderDetails.setDescription('Product Description');

	var tax = new ApiContracts.ExtendedAmountType();
	tax.setAmount('4.26');
	tax.setName('level2 tax name');
	tax.setDescription('level2 tax');

	var duty = new ApiContracts.ExtendedAmountType();
	duty.setAmount('8.55');
	duty.setName('duty name');
	duty.setDescription('duty description');

	var shipping = new ApiContracts.ExtendedAmountType();
	shipping.setAmount('8.55');
	shipping.setName('shipping name');
	shipping.setDescription('shipping description');

	var billTo = new ApiContracts.CustomerAddressType();
	billTo.setFirstName('Ellen');
	billTo.setLastName('Johnson');
	billTo.setCompany('Souveniropolis');
	billTo.setAddress('14 Main Street');
	billTo.setCity('Pecan Springs');
	billTo.setState('TX');
	billTo.setZip('44628');
	billTo.setCountry('USA');

	var shipTo = new ApiContracts.CustomerAddressType();
	shipTo.setFirstName('China');
	shipTo.setLastName('Bayles');
	shipTo.setCompany('Thyme for Tea');
	shipTo.setAddress('12 Main Street');
	shipTo.setCity('Pecan Springs');
	shipTo.setState('TX');
	shipTo.setZip('44628');
	shipTo.setCountry('USA');

	var lineItem_id1 = new ApiContracts.LineItemType();
	lineItem_id1.setItemId('1');
	lineItem_id1.setName('vase');
	lineItem_id1.setDescription('cannes logo');
	lineItem_id1.setQuantity('18');
	lineItem_id1.setUnitPrice(45.00);

	var lineItem_id2 = new ApiContracts.LineItemType();
	lineItem_id2.setItemId('2');
	lineItem_id2.setName('vase2');
	lineItem_id2.setDescription('cannes logo2');
	lineItem_id2.setQuantity('28');
	lineItem_id2.setUnitPrice('25.00');

	var lineItemList = [];
	lineItemList.push(lineItem_id1);
	lineItemList.push(lineItem_id2);

	var lineItems = new ApiContracts.ArrayOfLineItem();
	lineItems.setLineItem(lineItemList);

	var userField_a = new ApiContracts.UserField();
	userField_a.setName('A');
	userField_a.setValue('Aval');

	var userField_b = new ApiContracts.UserField();
	userField_b.setName('B');
	userField_b.setValue('Bval');

	var userFieldList = [];
	userFieldList.push(userField_a);
	userFieldList.push(userField_b);

	var userFields = new ApiContracts.TransactionRequestType.UserFields();
	userFields.setUserField(userFieldList);

	var transactionSetting1 = new ApiContracts.SettingType();
	transactionSetting1.setSettingName('duplicateWindow');
	transactionSetting1.setSettingValue('120');

	var transactionSetting2 = new ApiContracts.SettingType();
	transactionSetting2.setSettingName('recurringBilling');
	transactionSetting2.setSettingValue('false');

	var transactionSettingList = [];
	transactionSettingList.push(transactionSetting1);
	transactionSettingList.push(transactionSetting2);

	var transactionSettings = new ApiContracts.ArrayOfSetting();
	transactionSettings.setSetting(transactionSettingList);

	var transactionRequestType = new ApiContracts.TransactionRequestType();
	transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
	transactionRequestType.setPayment(paymentType);
	transactionRequestType.setAmount(amount);
	transactionRequestType.setLineItems(lineItems);
	transactionRequestType.setUserFields(userFields);
	transactionRequestType.setOrder(orderDetails);
	transactionRequestType.setTax(tax);
	transactionRequestType.setDuty(duty);
	transactionRequestType.setShipping(shipping);
	transactionRequestType.setBillTo(billTo);
	transactionRequestType.setShipTo(shipTo);
	transactionRequestType.setTransactionSettings(transactionSettings);

	var createRequest = new ApiContracts.CreateTransactionRequest();
	createRequest.setMerchantAuthentication(merchantAuthenticationType);
	createRequest.setTransactionRequest(transactionRequestType);

	//pretty print request
	console.log(JSON.stringify(createRequest.getJSON(), null, 2));
		
	var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());

    ctrl.execute(() => {
        const apiResponse = ctrl.getResponse();
        const response = new ApiContracts.CreateTransactionResponse(apiResponse);
        console.log(JSON.stringify(response, null, 2));
        if (response !== null) {
            if (response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                if (response.getTransactionResponse().getMessages() !== null) {
                    console.log('Successfully created transaction with Transaction ID: ' + response.getTransactionResponse().getTransId());
					console.log('Response Code: ' + response.getTransactionResponse().getResponseCode());
					console.log('Message Code: ' + response.getTransactionResponse().getMessages().getMessage()[0].getCode());
					console.log('Description: ' + response.getTransactionResponse().getMessages().getMessage()[0].getDescription());
                    res.json({ message: 'Transaction was successful.' });
                } else {
                    if (response.getTransactionResponse().getErrors() !== null) {
                        let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                        let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                        res.json({
                            error: `${code}: ${text}`
                        });
                    } else {
                        res.json({ error: 'Transaction failed.' });
                    }
                }
            } else {
                if (response.getTransactionResponse() !== null && response.getTransactionResponse().getErrors() !== null) {
                    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                    res.json({
                        error: `${code}: ${text}`
                    });
                } else {
                    let code = response.getMessages().getMessage()[0].getCode();
                    let text = response.getMessages().getMessage()[0].getText();
                    res.json({
                        error: `${code}: ${text}`
                    });
                }
            }

        } else {
            res.json({ error: 'No response.' });
        }
    });
}
	